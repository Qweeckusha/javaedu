import java.util.LinkedList;
import java.util.Queue;

public class Buffer<T> {
    // Очередь для хранения элементов буфера. Используется LinkedList, так как он реализует интерфейс Queue.
    private final Queue<T> queue;

    // Максимальная вместимость буфера (емкость).
    private final int capacity;

    /**
     * Конструктор класса Buffer.
     * Инициализирует пустую очередь и задает максимальную емкость буфера.
     *
     * @param capacity Максимальное количество элементов, которое может хранить буфер задаётся в классе Main.
     */
    public Buffer(int capacity) {
        this.queue = new LinkedList<>(); // Создаем пустую очередь.
        this.capacity = capacity;       // Устанавливаем максимальную емкость буфера.
    }

    /**
     * Метод put добавляет элемент в буфер.
     * Если буфер заполнен, поток блокируется до тех пор, пока не освободится место.
     *
     * @param item Элемент, который нужно добавить в буфер.
     * @throws InterruptedException Если поток был прерван во время ожидания.
     */
    public synchronized void put(T item) throws InterruptedException {
        // Пока размер очереди равен максимальной емкости, поток ждет (блокируется).
        while (queue.size() == capacity) {
            wait(); // Поток переходит в состояние ожидания, пока другой поток не вызовет notifyAll().
        }
        queue.add(item); // Добавляем элемент в очередь.
        notifyAll();      // Уведомляем все ожидающие потоки, что в буфере появилось новое место.
    }

    /**
     * Метод take извлекает элемент из буфера.
     * Если буфер пуст, поток блокируется до тех пор, пока не появится элемент.
     *
     * @return Первый элемент из очереди (FIFO - First In, First Out).
     * @throws InterruptedException Если поток был прерван во время ожидания.
     */
    public synchronized T take() throws InterruptedException {
        // Пока очередь пуста, поток ждет (блокируется).
        while (queue.isEmpty()) {
            wait(); // Поток переходит в состояние ожидания, пока другой поток не вызовет notifyAll().
        }
        T item = queue.poll(); // Извлекаем первый элемент из очереди.
        notifyAll();           // Уведомляем все ожидающие потоки, что в буфере освободилось место.
        return item;           // Возвращаем извлеченный элемент.
    }

    /**
     * Метод size возвращает текущее количество элементов в буфере.
     *
     * @return Текущий размер очереди (количество элементов в буфере).
     */
    public synchronized int size() {
        return queue.size(); // Возвращаем текущий размер очереди.
    }
}